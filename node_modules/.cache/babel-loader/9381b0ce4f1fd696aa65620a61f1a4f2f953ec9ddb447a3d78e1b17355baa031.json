{"ast":null,"code":"const express = require('express');\nconst bodyParser = require('body-parser');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst cors = require('cors');\nconst app = express();\nconst port = process.env.PORT || 3006;\napp.use(cors({\n  origin: '*'\n}));\napp.use(bodyParser.urlencoded({\n  extended: false\n}));\napp.use(bodyParser.json());\napp.use('/', express.static('public'));\n\n// Configurar Socket.IO\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n  path: '/gpd/vehicle/socket.io'\n});\n\n// Configurar CORS específicamente para la ruta de Socket.IO\napp.use('/gpd/vehicle/socket.io', cors());\n\n// Importar tu controlador\nconst {\n  updateAd\n} = require('./controllers/updateAd');\n\n// Pasar la instancia de Socket.IO al controlador\napp.use('/', (req, res, next) => {\n  req.io = io;\n  next();\n});\n\n// Configurar eventos de Socket.IO si es necesario\n// ...\n\n// Agregar el middleware de enrutamiento\nconst router = require('./routes/router');\napp.use('/', router);\n\n// Iniciar el servidor\nserver.listen(port, function () {\n  console.log('Servidor web escuchando en el puerto http://localhost:' + port);\n});","map":{"version":3,"names":["express","require","bodyParser","http","socketIo","cors","app","port","process","env","PORT","use","origin","urlencoded","extended","json","static","server","createServer","io","path","updateAd","req","res","next","router","listen","console","log"],"sources":["/Users/rodrigo/Desktop/traxiapp/src/App.js"],"sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst cors = require('cors');\n\nconst app = express();\nconst port = process.env.PORT || 3006;\n\napp.use(cors({ origin: '*' }));\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\napp.use('/', express.static('public'));\n\n// Configurar Socket.IO\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n  path: '/gpd/vehicle/socket.io'\n});\n\n// Configurar CORS específicamente para la ruta de Socket.IO\napp.use('/gpd/vehicle/socket.io', cors());\n\n// Importar tu controlador\nconst { updateAd } = require('./controllers/updateAd');\n\n// Pasar la instancia de Socket.IO al controlador\napp.use('/', (req, res, next) => {\n  req.io = io;\n  next();\n});\n\n// Configurar eventos de Socket.IO si es necesario\n// ...\n\n// Agregar el middleware de enrutamiento\nconst router = require('./routes/router');\napp.use('/', router);\n\n// Iniciar el servidor\nserver.listen(port, function () {\n  console.log('Servidor web escuchando en el puerto http://localhost:' + port);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AACzC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAW,CAAC;AACrC,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMK,GAAG,GAAGN,OAAO,CAAC,CAAC;AACrB,MAAMO,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACC,IAAI,IAAI,IAAI;AAErCJ,GAAG,CAACK,GAAG,CAACN,IAAI,CAAC;EAAEO,MAAM,EAAE;AAAI,CAAC,CAAC,CAAC;AAC9BN,GAAG,CAACK,GAAG,CAACT,UAAU,CAACW,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAM,CAAC,CAAC,CAAC;AACnDR,GAAG,CAACK,GAAG,CAACT,UAAU,CAACa,IAAI,CAAC,CAAC,CAAC;AAC1BT,GAAG,CAACK,GAAG,CAAC,GAAG,EAAEX,OAAO,CAACgB,MAAM,CAAC,QAAQ,CAAC,CAAC;;AAEtC;AACA,MAAMC,MAAM,GAAGd,IAAI,CAACe,YAAY,CAACZ,GAAG,CAAC;AACrC,MAAMa,EAAE,GAAGf,QAAQ,CAACa,MAAM,EAAE;EAC1BG,IAAI,EAAE;AACR,CAAC,CAAC;;AAEF;AACAd,GAAG,CAACK,GAAG,CAAC,wBAAwB,EAAEN,IAAI,CAAC,CAAC,CAAC;;AAEzC;AACA,MAAM;EAAEgB;AAAS,CAAC,GAAGpB,OAAO,CAAC,wBAAwB,CAAC;;AAEtD;AACAK,GAAG,CAACK,GAAG,CAAC,GAAG,EAAE,CAACW,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EAC/BF,GAAG,CAACH,EAAE,GAAGA,EAAE;EACXK,IAAI,CAAC,CAAC;AACR,CAAC,CAAC;;AAEF;AACA;;AAEA;AACA,MAAMC,MAAM,GAAGxB,OAAO,CAAC,iBAAiB,CAAC;AACzCK,GAAG,CAACK,GAAG,CAAC,GAAG,EAAEc,MAAM,CAAC;;AAEpB;AACAR,MAAM,CAACS,MAAM,CAACnB,IAAI,EAAE,YAAY;EAC9BoB,OAAO,CAACC,GAAG,CAAC,wDAAwD,GAAGrB,IAAI,CAAC;AAC9E,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}